// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// chordalD_c
double chordalD_c(const arma::mat& Ux, const arma::mat& Uy);
RcppExport SEXP _singR_chordalD_c(SEXP UxSEXP, SEXP UySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ux(UxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Uy(UySEXP);
    rcpp_result_gen = Rcpp::wrap(chordalD_c(Ux, Uy));
    return rcpp_result_gen;
END_RCPP
}
// calculateJB_c
double calculateJB_c(const arma::mat& U, const arma::mat& X, double alpha);
RcppExport SEXP _singR_calculateJB_c(SEXP USEXP, SEXP XSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateJB_c(U, X, alpha));
    return rcpp_result_gen;
END_RCPP
}
// objectiveJoint_c
double objectiveJoint_c(const arma::mat& Ux, const arma::mat& Uy, const arma::mat& X, const arma::mat& Y, const arma::mat& normLX, const arma::mat& normLY, double rho, double alpha);
RcppExport SEXP _singR_objectiveJoint_c(SEXP UxSEXP, SEXP UySEXP, SEXP XSEXP, SEXP YSEXP, SEXP normLXSEXP, SEXP normLYSEXP, SEXP rhoSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ux(UxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Uy(UySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type normLX(normLXSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type normLY(normLYSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(objectiveJoint_c(Ux, Uy, X, Y, normLX, normLY, rho, alpha));
    return rcpp_result_gen;
END_RCPP
}
// calculateT_c
arma::mat calculateT_c(const arma::mat& U, const arma::mat& X, double alpha);
RcppExport SEXP _singR_calculateT_c(SEXP USEXP, SEXP XSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateT_c(U, X, alpha));
    return rcpp_result_gen;
END_RCPP
}
// calculateG_c
arma::mat calculateG_c(const arma::mat& U, const arma::mat& DataW, const arma::mat& invL, const arma::mat& A, double rho, double alpha, int r0);
RcppExport SEXP _singR_calculateG_c(SEXP USEXP, SEXP DataWSEXP, SEXP invLSEXP, SEXP ASEXP, SEXP rhoSEXP, SEXP alphaSEXP, SEXP r0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type DataW(DataWSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invL(invLSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type r0(r0SEXP);
    rcpp_result_gen = Rcpp::wrap(calculateG_c(U, DataW, invL, A, rho, alpha, r0));
    return rcpp_result_gen;
END_RCPP
}
// updateUboth_c
Rcpp::List updateUboth_c(const arma::mat& Ux, const arma::mat& Uy, const arma::mat& xData, const arma::mat& yData, const arma::mat& invLx, const arma::mat& invLy, double rho, int r0, double alpha, double tau, int maxiter, double tol);
RcppExport SEXP _singR_updateUboth_c(SEXP UxSEXP, SEXP UySEXP, SEXP xDataSEXP, SEXP yDataSEXP, SEXP invLxSEXP, SEXP invLySEXP, SEXP rhoSEXP, SEXP r0SEXP, SEXP alphaSEXP, SEXP tauSEXP, SEXP maxiterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ux(UxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Uy(UySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xData(xDataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type yData(yDataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invLx(invLxSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invLy(invLySEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type r0(r0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(updateUboth_c(Ux, Uy, xData, yData, invLx, invLy, rho, r0, alpha, tau, maxiter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_singR_chordalD_c", (DL_FUNC) &_singR_chordalD_c, 2},
    {"_singR_calculateJB_c", (DL_FUNC) &_singR_calculateJB_c, 3},
    {"_singR_objectiveJoint_c", (DL_FUNC) &_singR_objectiveJoint_c, 8},
    {"_singR_calculateT_c", (DL_FUNC) &_singR_calculateT_c, 3},
    {"_singR_calculateG_c", (DL_FUNC) &_singR_calculateG_c, 7},
    {"_singR_updateUboth_c", (DL_FUNC) &_singR_updateUboth_c, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_singR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
